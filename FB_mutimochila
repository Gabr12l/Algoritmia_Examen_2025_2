#include <cmath>
#include <iostream>
#include <fstream>
#include <iomanip>
#define N 10

using namespace std;

void cargaBin(int i,int cromosoma[N],int base,int cantVelocidades) {
    for (int j=0;j<cantVelocidades;j++) {
        cromosoma[j] =0;
    }
    int j=0;
    while (i>0) {
        cromosoma[j]=i%base;
        i = i/base;
        j++;
    }
}
int main() {
    int velocidades[N] = {150,100,80,50,120,10};
    int cantVelocidades = 6;
    int base = 4;
    int capacidadDisco[N] = {250,200,200};
    int cantdiscos = 3;
    int combinaciones = (int)pow(base,cantVelocidades);
    int cromosoma[cantVelocidades];
    int mayorMinimo = -1;
    int resultado;

    for (int i=0;i<combinaciones;i++) {
        cargaBin(i,cromosoma,base,cantVelocidades);
        int uso [N] = {0,0,0};
        int usoVel[N]={0,0,0,0,0,0};
        int auxCapacidades[cantVelocidades];
        for (int j=0;j<cantdiscos;j++) auxCapacidades[j] = capacidadDisco[j];
        for (int k=0;k<cantVelocidades;k++) {
            if (cromosoma[k]>0) {
                int disco = cromosoma[k]-1;
                auxCapacidades[disco] -= velocidades[k];
                uso[disco]++;
                usoVel[k]++;
            }
        }
        bool valido = true;
        for (int i=0;i<cantdiscos;i++) {
            if (auxCapacidades[i]<0 || uso[i]==0) valido= false;
        }
        for (int i=0;i<cantVelocidades;i++) {
            if (usoVel[i]==0) valido = false;
        }
        if (valido) {
            int minimo = auxCapacidades[0];
            for(int j=0;j<cantdiscos;j++) {
                if (auxCapacidades[j]<=minimo) minimo = auxCapacidades[j];
            }
            if (minimo > mayorMinimo) {
                mayorMinimo = minimo;
                resultado = i;
                // cout << "Mejor performance (minimo de discos) = " << mayorMinimo << endl;
                // for (int d=1; d<=cantdiscos; d++) {
                //     cout << "Disco " << d<< ": ";
                //     cargaBin(resultado,cromosoma,base,cantVelocidades);
                //     for (int j=0;j<cantVelocidades;j++) {
                //         if (cromosoma[j]==d) cout << (j+1)<< " "; // tabla j+1
                //     }
                //     cout << endl;
                // }
            }
        }
    }
    cout << "Mejor performance (minimo de discos) = " << mayorMinimo << endl;
    for (int d=1; d<=cantdiscos; d++) {
        cout << "Disco " << d<< ": ";
        cargaBin(resultado,cromosoma,base,cantVelocidades);
        for (int j=0;j<cantVelocidades;j++) {
            if (cromosoma[j]==d) cout << (j+1)<< " "; // tabla j+1
        }
        cout << endl;
    }
    return 0;
}





Ejemplo de kung fu panda
#include <iostream>
#include <cmath>

using namespace std;

#define N 12
#define LINEAS  100

void agregarDependencias(int matrizDependencias[N][N]);
void llenarCromosoma(int *cromosoma, int i, int estados);
bool validarDependencias(int matrizDependencias[N][N], int cromosoma[N]);
void imprimirLineas(int size, char c);


int main() {
    char arrArmas[N] = {'Z', 'P', 'R', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L'};
    int arrPoder[N]={60, 80, 38, 25, 49, 57, 68, 35, 62, 42, 36, 54};
    int arrTipo[N]={3, 1, 2, 2, 2, 1, 3, 2, 2, 2, 1, 3};
    int matrizDependencias[12][12]= {0};
    agregarDependencias(matrizDependencias);
    int estados = 4, nroSolucion=1;
    int casos = (int)pow(4, 12);
    int cromosoma[N];
    int guerrero1, guerrero2, guerrero3;
    bool esValido;
    cout<<"Ingrese el poder de los guerreros que PO enfrentara (poder1,  poder2, poder3)";
    cin>>guerrero1;
    cin.get();
    cin>>guerrero2;
    cin.get();
    cin>>guerrero3;
    for (int i=0; i<casos; i++) {
        int sumaPoderes[3]={0};
        llenarCromosoma(cromosoma, i, estados);
        esValido = true;
        for (int j=0; j<N; j++) {
            if (cromosoma[j] == 1) {
                if (arrTipo[j] != 2) {
                    esValido = false;
                    break;
                } else {
                    sumaPoderes[0] += arrPoder[j];
                }
            } else if (cromosoma[j] == 2) {
                if (arrTipo[j] != 1 and arrTipo[j] != 3) {
                    esValido = false;
                    break;
                } else {
                    sumaPoderes[1] += arrPoder[j];
                }
            } else if (cromosoma[j] == 3) {
                if (arrTipo[j] != 3) {
                    esValido = false;
                    break;
                } else {
                    sumaPoderes[2] += arrPoder[j];
                }
            }
        }
        if (validarDependencias(matrizDependencias, cromosoma) and esValido
            and sumaPoderes[0]>=guerrero1 and sumaPoderes[1]>=guerrero2
            and sumaPoderes[2]>=guerrero3) {
            imprimirLineas(LINEAS, '-');
            cout<<"SOLUCION "<<nroSolucion<<endl;
            imprimirLineas(LINEAS, '-');
            for (int l=1; l<4; l++) {
                cout<<"Guerrero "<<l<<endl<<"Poder:"<<sumaPoderes[l-1]<<endl<<"Armas en mochila para vencerlo: ";
                for (int m=0; m<N; m++) {
                    if (cromosoma[m] == l) {
                        cout<<arrArmas[m]<<' ';
                    }
                }
                cout<<endl;
            }
            nroSolucion ++;
        }
    }
    if (nroSolucion==1) {
        cout<<"No existen soluciones para la combinacion introducida"<<endl;
    }
    return 0;
}
bool validarDependencias(int matrizDependencias[N][N], int cromosoma[N]) {
    for (int i=0; i<N; i++) {
        if (cromosoma[i] != 0) {
            for (int j=0; j<N; j++) {
                if (matrizDependencias[i][j]==-1) {
                    if (cromosoma[j] != cromosoma[i]) {
                        return false;
                    }
                }
            }
        }
    }
    return true;
}
void llenarCromosoma(int *cromosoma, int i, int estados) {
    for (int j=0; j<N; j++) {
        cromosoma[j]=0;
    }
    int j=0;
    while (i>0) {
        cromosoma[j++]=i%estados;
        i=i/estados;
    }
}
void agregarDependencias(int matrizDependencias[N][N]) {
    matrizDependencias[1][0]= -1;
    matrizDependencias[3][2]= -1;
    matrizDependencias[7][0]= -1;
    matrizDependencias[7][4]= -1;
    matrizDependencias[8][2]= -1;
    matrizDependencias[10][0]= -1;
}
void imprimirLineas(int size, char c) {
    for (int i=0; i<size; i++) {
        cout<<c;
    }
    cout<<endl;
}
